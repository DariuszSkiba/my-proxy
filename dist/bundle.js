/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// src/index.js\ndocument.getElementById('start-camera-btn').addEventListener('click', function () {\n  document.getElementById('upload-list').click();\n});\ndocument.getElementById('upload-list').addEventListener('change', function (event) {\n  const file = event.target.files[0];\n  if (file) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const imageUrl = e.target.result;\n      readBarcodeFromImage(imageUrl);\n    };\n    reader.readAsDataURL(file);\n  }\n});\ndocument.getElementById('manual-submit-btn').addEventListener('click', function () {\n  const manualCode = document.getElementById('manual-code').value;\n  if (manualCode) {\n    fetchProductInfo(manualCode);\n    document.getElementById('manual-code').value = ''; // Clear the text field\n  } else {\n    console.error(\"Please enter a valid barcode.\");\n  }\n});\nfunction readBarcodeFromImage(imageUrl) {\n  Quagga.decodeSingle({\n    src: imageUrl,\n    numOfWorkers: 0,\n    inputStream: {\n      size: 800\n    },\n    decoder: {\n      readers: [\"ean_reader\", \"ean_8_reader\", \"code_128_reader\", \"code_39_reader\", \"code_93_reader\", \"upc_reader\", \"upc_e_reader\", \"i2of5_reader\", \"codabar_reader\"]\n    },\n    locate: true,\n    locator: {\n      patchSize: \"medium\",\n      halfSample: false\n    }\n  }, function (result) {\n    if (result && result.codeResult) {\n      fetchProductInfo(result.codeResult.code);\n    } else {\n      console.error(\"No barcode detected.\");\n      readQRCodeFromImage(imageUrl);\n    }\n  }, function (error) {\n    console.error(\"Error reading barcode: \", error);\n    readQRCodeFromImage(imageUrl);\n  });\n}\nfunction readQRCodeFromImage(imageUrl) {\n  const img = new Image();\n  img.src = imageUrl;\n  img.crossOrigin = \"Anonymous\";\n  img.onload = function () {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    context.drawImage(img, 0, 0, img.width, img.height);\n    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    console.log(\"Image Data:\", imageData);\n    const qrCode = jsQR(imageData.data, imageData.width, imageData.height);\n    if (qrCode) {\n      addBarcodeToList(qrCode.data, \"QR Code\");\n      console.log(\"QR code detected:\", qrCode.data);\n    } else {\n      console.error(\"No QR code detected.\");\n    }\n  };\n  img.onerror = function () {\n    console.error(\"Error loading image for QR code decoding.\");\n  };\n}\nfunction fetchProductInfo(barcode) {\n  fetch(`https://world.openfoodfacts.org/api/v0/product/${barcode}.json`).then(response => response.json()).then(data => {\n    console.log(\"Fetched data:\", data);\n    if (data.status === 1 && data.product.product_name) {\n      const productName = data.product.product_name;\n      console.log(\"Product name found:\", productName);\n      addBarcodeToList(barcode, productName);\n    } else {\n      console.error(\"Product not found in database or product name is empty.\");\n      addBarcodeToList(barcode, \"Unknown Product\");\n    }\n  }).catch(error => {\n    console.error(\"Error fetching product info:\", error);\n    addBarcodeToList(barcode, \"Unknown Product\");\n  });\n}\nfunction addBarcodeToList(barcode, productName) {\n  const barcodeList = document.getElementById('barcode-list');\n  const li = document.createElement('li');\n  li.textContent = `${productName} (${barcode})`;\n  const quantityInput = document.createElement('input');\n  quantityInput.type = 'number';\n  quantityInput.value = 1;\n  quantityInput.classList.add('quantity-input');\n  const removeBtn = document.createElement('span');\n  removeBtn.textContent = 'Remove';\n  removeBtn.classList.add('remove-btn');\n  removeBtn.addEventListener('click', function () {\n    barcodeList.removeChild(li);\n  });\n  const editBtn = document.createElement('span');\n  editBtn.textContent = 'Edit';\n  editBtn.classList.add('edit-btn');\n  editBtn.addEventListener('click', function () {\n    const newProductName = prompt(\"Enter new product name:\", productName);\n    if (newProductName) {\n      li.textContent = `${newProductName} (${barcode})`;\n      li.appendChild(quantityInput);\n      li.appendChild(removeBtn);\n      li.appendChild(editBtn);\n    }\n  });\n  li.appendChild(quantityInput);\n  li.appendChild(removeBtn);\n  li.appendChild(editBtn);\n  barcodeList.appendChild(li);\n  console.log(\"Added to list:\", productName, barcode);\n}\n\n// Load API client library\ngapi.load('client:auth2', initClient);\nfunction initClient() {\n  gapi.client.init({\n    apiKey: \"AIzaSyCfVaVeZoV2ub0p4QKL2eiWz3GheBtcNkg\",\n    clientId: \"101238636771-9al5ghl8onvg724218g7riageeuv7vd3.apps.googleusercontent.com\",\n    discoveryDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n    scope: \"https://www.googleapis.com/auth/spreadsheets\"\n  }).then(function () {\n    document.getElementById('submit-data-btn').addEventListener('click', handleAuthClick);\n  });\n}\nfunction handleAuthClick(event) {\n  gapi.auth2.getAuthInstance().signIn().then(sendDataToSheet);\n}\nfunction sendDataToSheet() {\n  const barcodeList = document.querySelectorAll('#barcode-list li');\n  const dataToSend = [];\n  barcodeList.forEach((item, index) => {\n    const name = item.childNodes[0].textContent;\n    const quantity = item.querySelector('.quantity-input').value;\n    const barcode = name.match(/\\(([^)]+)\\)/)[1];\n    const scannedDate = new Date().toISOString();\n    dataToSend.push([index + 1, name.split(' (')[0], quantity, barcode, scannedDate, '']);\n  });\n  const params = {\n    spreadsheetId: \"1H2al0qAaz3CLlLUETicwXLYNOrZJhdMNLdil607H1BI\",\n    range: 'scaned_products!A:F',\n    valueInputOption: 'USER_ENTERED',\n    insertDataOption: 'INSERT_ROWS'\n  };\n  const valueRangeBody = {\n    values: dataToSend\n  };\n  gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody).then(response => {\n    console.log(response);\n    alert('Data successfully submitted!');\n  }, error => {\n    console.error(error);\n    alert('Error submitting data.');\n  });\n}\n\n//# sourceURL=webpack://my-proxy/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;